using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Timers;
using System.Windows.Threading;
using Microsoft.Kinect;
using Microsoft.Speech.AudioFormat;
using Microsoft.Speech.Recognition;
using SAMI.Utilities.Logging;
using Timer = System.Timers.Timer;

namespace SAMI.Speech
{
    /// <summary>
    /// In charge of initializing Kinect and getting speech recognition data from it.
    /// </summary>
    public class KinectController : IVoiceController
    {
        protected KinectSensor _sensor;
        protected Stream _inputstream;
        protected List<Grammar> _grammars;
        protected String _grammarFileName = "MainGrammar.xml";
        protected RecognizedNewPhrase _recognizedCallback;
        protected bool _kinectActive = false;
        protected SpeechRecognitionEngine _recoEngine;
        protected Timer _resetTimer;
        protected readonly TimeSpan _resetInterval = TimeSpan.FromMinutes(30);

        private GrammarProviderCollection _grammarCollection;
        private bool _updateGrammars = false;
        private bool _resetKinect = false;

        public bool Valid
        {
            get;
            protected set;
        }

        public static readonly String DefaultGrammarName = "Default";

        private String _grammarName = DefaultGrammarName;
        /// <summary>
        /// Sets the current grammar that should be used when listening for input.
        /// This may be accessed anywhere, but should only be set from the UI thread,
        /// since setting the grammar requires restarting the recognition engine.
        /// </summary>
        public String GrammarName
        {
            get
            {
                return _grammarName;
            }
            set
            {
                if (_grammarName != value)
                {
                    Stop();
                    _grammarName = value;
                    Start(_recognizedCallback);
                    _resetKinect = false;
                }
                CheckForUpdates();
            }
        }

        public void CheckForUpdates()
        {
            if(_resetKinect)
            {
                Logger.LogString("Resetting the kinect!", LogCategory.Debug);
                Stop();
                if (_updateGrammars)
                {
                    UpdateGrammars();
                    _updateGrammars = false;
                }
                Start(_recognizedCallback);
                _resetKinect = false;
            }
            else if (_updateGrammars)
            {
                Stop();
                UpdateGrammars();
                Start(_recognizedCallback);
            }
        }

        public KinectController()
            : this(true)
        {
        }

        public KinectController(bool useKinect)
        {
            _grammarCollection = new GrammarProviderCollection();
            _grammarCollection.GrammarChanged += GrammarChanged;
            UpdateGrammars();

            _resetTimer = new Timer(_resetInterval.TotalMilliseconds);
            _resetTimer.Elapsed += ResetTimer_Elapsed;
            _resetTimer.AutoReset = true;
            _resetTimer.Start();
            Valid = true;

            if (useKinect)
            {
                _sensor = (from sensorToCheck in KinectSensor.KinectSensors where sensorToCheck.Status == KinectStatus.Connected select sensorToCheck).FirstOrDefault();
                if (_sensor == null)
                {
                    Console.WriteLine(
                            "No Kinect sensors are attached to this computer or none of the ones that are\n" +
                            "attached are \"Connected\".\n" +
                            "Attach the KinectSensor and restart this application.\n" +
                            "If that doesn't work run SkeletonViewer-WPF to better understand the Status of\n" +
                            "the Kinect sensors.\n\n" +
                            "Press any key to continue.\n");
                    Valid = false;
                    return;
                }
                _sensor.Start();
            }
        }

        private void UpdateGrammars()
        {
            Logger.LogString("Updating the grammar!", LogCategory.Debug);
            _grammarCollection.UpdateGrammarFile(_grammarFileName);
            Grammar baseGrammar = new Grammar(_grammarFileName);
            baseGrammar.Enabled = true;
            baseGrammar.Name = DefaultGrammarName;
            _grammars = _grammarCollection.RequiredGrammars;
            _grammars.Add(baseGrammar);
            _updateGrammars = false;
        }

        private void GrammarChanged(object sender, EventArgs e)
        {
            _updateGrammars = true;
        }

        protected void ResetTimer_Elapsed(object sender, ElapsedEventArgs args)
        {
            Logger.LogString("Asking to invoke reset.", LogCategory.Debug);
            _resetKinect = true;
        }

        /// <summary>
        /// Gets the metadata for the speech recognizer (acoustic model) most suitable to
        /// process audio from Kinect device.
        /// </summary>
        /// <returns>
        /// RecognizerInfo if found, <code>null</code> otherwise.
        /// </returns>
        private static RecognizerInfo GetKinectRecognizer()
        {
            foreach (RecognizerInfo recognizer in SpeechRecognitionEngine.InstalledRecognizers())
            {
                string value;
                recognizer.AdditionalInfo.TryGetValue("Kinect", out value);
                if ("True".Equals(value, StringComparison.OrdinalIgnoreCase) && "en-US".Equals(recognizer.Culture.Name, StringComparison.OrdinalIgnoreCase))
                {
                    return recognizer;
                }
            }

            return null;
        }

        public void Start(RecognizedNewPhrase recognized)
        {
            SetupRecognitionEngine();

            _recoEngine.SpeechRecognized += recoEngine_SpeechRecognized;
            _recoEngine.RecognizeCompleted += recoEngine_RecognizeCompleted;

            _recognizedCallback = recognized;
            _kinectActive = true;

            if (_sensor != null)
            {
                _recoEngine.RecognizeAsync(RecognizeMode.Multiple);
            }
        }

        private void SetupRecognitionEngine()
        {
            if (_sensor != null)
            {
                // Obtain the KinectAudioSource to do audio capture
                KinectAudioSource source = _sensor.AudioSource;
                source.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression; // No AEC for this sample
                source.NoiseSuppression = true;
                source.AutomaticGainControlEnabled = false; // Important to turn this off for speech recognition
                _inputstream = source.Start();
            }

            RecognizerInfo ri = GetKinectRecognizer();

            // Create a SpeechRecognitionEngine object and add the grammars to it.
            _recoEngine = new SpeechRecognitionEngine(ri.Id);
            if (_sensor != null)
            {
                _recoEngine.SetInputToAudioStream(_inputstream, new SpeechAudioFormatInfo(EncodingFormat.Pcm, 16000, 16, 1, 32000, 2, null));
            }
            _recoEngine.LoadGrammar(_grammars.Single(gram => gram.Name.Equals(GrammarName)));
            _recoEngine.BabbleTimeout = _resetInterval;
            _recoEngine.InitialSilenceTimeout = _resetInterval;
        }

        public void Stop()
        {
            try
            {
                _recoEngine.RecognizeAsyncCancel();
                while (_kinectActive && _sensor != null)
                {
                    Thread.Sleep(10);
                }
            }
            catch (InvalidOperationException exp)
            {
                // This means we were already cancelled due to timeout.
                // We need to figure out in what cases this happens, but
                // until then, we can just ignore.
            }
            _recoEngine.Dispose();
            _recoEngine = null;
        }

        public void recoEngine_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)
        {
            RecognitionResult result = e.Result;
            RecognizeSpeech(result);
        }

        private void RecognizeSpeech(RecognitionResult result)
        {
            Dictionary<String, String> vals = new Dictionary<string, string>();
            // If confidence is 1.0, we probably just simulated it, so no need to report wht we found.
            if (result != null && result.Confidence != 1.0)
            {
                Logger.LogString(result.Text + " - " + result.Confidence.ToString() + "%", LogCategory.Message);
                Console.WriteLine(result.Text + " - " + result.Confidence.ToString() + "%");
            }
            if (result != null && result.Confidence > 0.7)
            {
                foreach (KeyValuePair<String, SemanticValue> val in result.Semantics)
                {
                    if (val.Value.Value == null)
                    {
                        vals[val.Key] = "";
                    }
                    else
                    {
                        vals[val.Key] = val.Value.Value.ToString();
                    }
                }
                _recognizedCallback(new Dialog(vals, result.Text));
            }
        }

        private void recoEngine_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)
        {
            _kinectActive = false;
        }

        public void Dispose()
        {
            if (_inputstream != null)
            {
                _inputstream.Dispose();
            }
            _recoEngine.Dispose();
            if (_sensor != null)
            {
                _sensor.Stop();
            }
        }

        public RecognitionResult SimulateInput(String input)
        {
            SetupRecognitionEngine();
            RecognitionResult result = _recoEngine.EmulateRecognize(input);
            _recoEngine.Dispose();
            return result;
        }

        public void SimulateFullInput(String input)
        {
            RecognizeSpeech(_recoEngine.EmulateRecognize(input));
        }
    }
}
